local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DataStoreService = game:GetService("DataStoreService")

local loadModule = table.unpack(require(ReplicatedStorage.ZenithFramework))

return function()
    local DataStore = loadModule("DataStore")

	local TestDataStore = DataStoreService:GetDataStore("TestDataStore")

	DataStore.removeDataAsync(TestDataStore, "TestIndex")

	SKIP()

    describe("DataStore", function()
        it("should create or return the data cache table, and error if the given argument is not a datastore object", function()
			expect(function()
				DataStore.getStoredData(TestDataStore)
			end).never.to.throw()
			expect(typeof(DataStore.getStoredData(TestDataStore))).to.equal("table")
			expect(function()
				DataStore.getStoredData("Fail")
			end).to.throw()
        end)

		it("should set the session data for a test index, and error with incorrect arguments", function()
			expect(function()
				DataStore.setSessionData(TestDataStore, "TestIndex", {Testing = true})
			end).never.to.throw()
			expect(DataStore.getStoredData(TestDataStore).TestIndex.Testing).to.be.ok()
			expect(function()
				DataStore.setSessionData("Fail", "TestIndex", {Testing = true})
			end).to.throw()
			expect(function()
				DataStore.setSessionData(TestDataStore, TestDataStore, {Testing = true})
			end).to.throw()
			expect(function()
				DataStore.setSessionData(TestDataStore, "TestIndex", nil)
			end).never.to.throw()
        end)

		it("should get data stored in the module, or from the store if this doesn't exist yet, and save initial data if given", function()
			local data 
			expect(function()
				data = DataStore.getData(TestDataStore, "TestIndex")
			end).never.to.throw()
			expect(data).to.equal(nil)
			expect(function()
				DataStore.getData(TestDataStore, "TestIndex", {Testing = true})
			end).never.to.throw()
			expect(DataStore.getData(TestDataStore, "TestIndex")).to.be.ok()
        end)

		it("should wait for the data until it gets it", function()
			expect(function()
				DataStore.waitForData(TestDataStore, "TestIndex")
			end).never.to.throw()
			expect(function()
				DataStore.waitForData("Fail", "TestIndex")
			end).to.throw()
			expect(function()
				DataStore.waitForData(TestDataStore, TestDataStore)
			end).to.throw()
			expect(DataStore.waitForData(TestDataStore, "TestIndex")).to.be.ok()
		end)

		it("should get the data directly from the data store", function()
			-- Data should exist because of previous tests
			expect(DataStore.getDataAsync(TestDataStore, "TestIndex")).to.be.ok()
			task.wait(6)
			-- Remove the data for next tests
			DataStore.removeDataAsync(TestDataStore, "TestIndex")
			expect(function()
				DataStore.getDataAsync(TestDataStore, "TestIndex")
			end).never.to.throw()
			expect(DataStore.getDataAsync(TestDataStore, "TestIndex")).never.to.be.ok()
		end)

		it("should overwrite or set the given data directly to the data store", function()
			task.wait(6)
			expect(function()
				DataStore.setDataAsync(TestDataStore, "TestIndex", {Testing = "Testing"})
			end).never.to.throw()
			expect(DataStore.getData(TestDataStore, "TestIndex")).to.be.ok()
			task.wait(6)
			expect(function()
				DataStore.setDataAsync("Fail", "TestIndex", {Testing = "Testing"})
			end).to.throw()
			task.wait(6)
			expect(function()
				DataStore.setDataAsync(TestDataStore, TestDataStore, {Testing = "Testing"})
			end).to.throw()
		end)

		it("should increment a saved value in the data store, and error if any arguments are incorrect", function()
			expect(function()
				DataStore.incrementDataAsync(TestDataStore, "TestIncrementIndex", 5)
			end).never.to.throw()
			expect(DataStore.getDataAsync(TestDataStore, "TestIncrementIndex")).to.equal(5)
			DataStore.incrementDataAsync(TestDataStore, "TestIndex", 5)
			expect(DataStore.getDataAsync(TestDataStore, "TestIndex")).never.to.equal(5)
			expect(function()
				DataStore.incrementDataAsync("Fail", "TestIndex", 5)
			end).to.throw()
			expect(function()
				DataStore.incrementDataAsync(TestDataStore, TestDataStore, 5)
			end).to.throw()
			expect(function()
				DataStore.incrementDataAsync(TestDataStore, "TestIncrementIndex", "Fail")
			end).to.throw()
		end)

		it("should update an existing value in the datastore", function()
			expect(function()
				DataStore.updateDataAsync(TestDataStore, "TestIndex", function(currentData) 
					currentData.Testing = "DataUpdated!"
					return currentData
				end)
			end).never.to.throw()
			expect(DataStore.getDataAsync(TestDataStore, "TestIndex").Testing).to.equal("DataUpdated!")
			expect(function()
				DataStore.updateDataAsync("Fail", "TestIndex", function(currentData) 
					currentData.Testing = "DataUpdated!"
				end)
			end).to.throw()
			expect(function()
				DataStore.updateDataAsync(TestDataStore, TestDataStore, function(currentData) 
					currentData.Testing = "DataUpdated!"
				end)
			end).to.throw()
			expect(function()
				DataStore.updateDataAsync(TestDataStore, "TestIndex", "Fail")
			end).to.throw()
		end)

		it("should list all the keys in a datastore", function()
			local dataKeys
			expect(function()
				dataKeys = DataStore.listKeys(TestDataStore)
			end).never.to.throw()
			expect(dataKeys).to.be.ok()
		end)

		it("should get the data size of an index in a datastore", function()
			local dataSize
			expect(function()
				dataSize = DataStore.getDataSize(TestDataStore, "TestIndex")
			end).never.to.throw()
			expect(dataSize).to.be.ok()
		end)

		it("should remove data in a datastore", function()
			task.wait(6)
			expect(function()
				DataStore.removeDataAsync(TestDataStore, "TestIndex")
			end).never.to.throw()
			expect(DataStore.getDataAsync(TestDataStore, "TestIndex")).never.to.be.ok()
			expect(function()
				DataStore.removeDataAsync("Fail", "TestIndex")
			end).to.throw()
			expect(function()
				DataStore.removeDataAsync(TestDataStore, TestDataStore)
			end).to.throw()
		end)
    end)

	afterAll(function()
		task.spawn(function()
			task.wait(6)
			DataStore.removeDataAsync(TestDataStore, "TestIncrementIndex")
		end)
	end)
end